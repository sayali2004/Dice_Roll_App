pipeline {
    agent any

    environment {
        FLUTTER_HOME = "D:/flutter"
        JAVA_HOME = "C:/Program Files/Java/jdk-20"
        ANDROID_SDK_ROOT = "C:/Users/sayali/AppData/Local/Android/Sdk"
        PATH = "${FLUTTER_HOME}/bin;${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin;${ANDROID_SDK_ROOT}/platform-tools;${JAVA_HOME}/bin;${env.PATH}"
        DOCKER_IMAGE = "sayali117/flutter-dice-app"
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/sayali2004/Dice_Roll_App.git', branch: 'main'
            }
        }

        stage('Flutter Version') {
            steps {
                bat 'git config --global --add safe.directory D:/flutter'
                bat 'flutter --version'
            }
        }

        stage('Flutter Doctor') {
            steps {
                bat 'flutter doctor -v'
            }
        }

        stage('Accept Android Licenses') {
            steps {
                bat '"%ANDROID_SDK_ROOT%\\cmdline-tools\\latest\\bin\\sdkmanager.bat" --licenses < NUL'
            }
        }

        stage('Install Dependencies') {
            steps {
                bat 'flutter pub get'
            }
        }

        stage('Analyze Code') {
            steps {
                bat 'flutter analyze'
            }
        }

        stage('Run Tests') {
            steps {
                bat 'flutter test'
            }
        }

        stage('Build APK') {
            options {
                timeout(time: 15, unit: 'MINUTES')
            }
            steps {
                bat 'flutter clean'
                bat 'flutter build apk --release --verbose'
            }
        }

        stage('Archive APK') {
            when {
                expression {
                    fileExists('build/app/outputs/flutter-apk/app-release.apk')
                }
            }
            steps {
                archiveArtifacts artifacts: 'build/app/outputs/flutter-apk/app-release.apk', fingerprint: true
            }
        }

        stage('Docker Build & Push') {
            when {
                expression {
                    fileExists('build/app/outputs/flutter-apk/app-release.apk')
                }
            }
            steps {
                writeFile file: 'Dockerfile', text: '''
                FROM nginx:alpine
                WORKDIR /usr/share/nginx/html
                COPY build/app/outputs/flutter-apk/app-release.apk .
                EXPOSE 80
                CMD ["nginx", "-g", "daemon off;"]
                '''
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        bat "docker build -t ${DOCKER_IMAGE}:latest ."
                        bat "docker login -u %DOCKER_USER% -p %DOCKER_PASS%"
                        bat "docker push ${DOCKER_IMAGE}:latest"
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution complete.'
        }
        success {
            echo '🎉 Build succeeded!'
        }
        failure {
            echo '❌ Build failed.'
        }
    }
}
